var _user$project$Main$intYogaProperty = F2(
	function (name, $int) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom$yogaProperty,
			name,
			_elm_lang$core$Json_Encode$int($int));
	});
var _user$project$Main$flexGrow = function (value) {
	return A2(_user$project$Main$intYogaProperty, 'flexGrow', value);
};
var _user$project$Main$stringYogaProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom$yogaProperty,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _user$project$Main$flexDirection = function (value) {
	return A2(_user$project$Main$stringYogaProperty, 'flexDirection', value);
};
var _user$project$Main$justifyContent = function (value) {
	return A2(_user$project$Main$stringYogaProperty, 'justifyContent', value);
};
var _user$project$Main$alignItems = function (value) {
	return A2(_user$project$Main$stringYogaProperty, 'alignItems', value);
};
var _user$project$Main$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$virtual_dom$VirtualDom$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _user$project$Main$text = function (value) {
	return A2(_user$project$Main$stringProperty, 'text', value);
};
var _user$project$Main$column = F2(
	function (properties, children) {
		return A3(
			_elm_lang$virtual_dom$VirtualDom$parent,
			'view',
			{
				ctor: '::',
				_0: _user$project$Main$flexDirection('column'),
				_1: properties
			},
			children);
	});
var _user$project$Main$label = function (properties) {
	return A2(_elm_lang$virtual_dom$VirtualDom$leaf, 'label', properties);
};
var _user$project$Main$view = function (model) {
	return A2(
		_user$project$Main$column,
		{
			ctor: '::',
			_0: _user$project$Main$flexGrow(1),
			_1: {
				ctor: '::',
				_0: _user$project$Main$justifyContent('center'),
				_1: {
					ctor: '::',
					_0: _user$project$Main$alignItems('center'),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: _user$project$Main$label(
				{
					ctor: '::',
					_0: _user$project$Main$text(
						_elm_lang$core$Basics$toString(model)),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		return {ctor: '_Tuple2', _0: model + 1, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$Main$init = {ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$Tick);
};
var _user$project$Main$main = _elm_lang$virtual_dom$VirtualDom$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions, view: _user$project$Main$view})();
